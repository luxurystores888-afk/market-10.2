# ðŸ’¾ AUTOMATED BACKUPS & ROLLBACKS
# Feature #7: Database snapshots on every deployment with one-click rollback

name: Automated Backups

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
  schedule:
    # Daily backups at 2 AM
    - cron: '0 2 * * *'

jobs:
  backup-database:
    name: Create Database Backup
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create database snapshot
        id: backup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_NAME="backup-$TIMESTAMP"
          
          echo "Creating database snapshot..."
          
          # PostgreSQL backup
          PGPASSWORD=${{ secrets.DB_PASSWORD }} pg_dump \
            -h ${{ secrets.DB_HOST }} \
            -U ${{ secrets.DB_USER }} \
            -d ${{ secrets.DB_NAME }} \
            -F c \
            -f $BACKUP_NAME.dump
          
          # Compress
          gzip $BACKUP_NAME.dump
          
          # Calculate size
          SIZE=$(ls -lh $BACKUP_NAME.dump.gz | awk '{print $5}')
          
          echo "BACKUP_FILE=$BACKUP_NAME.dump.gz" >> $GITHUB_OUTPUT
          echo "BACKUP_SIZE=$SIZE" >> $GITHUB_OUTPUT
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_OUTPUT
      
      - name: Upload to cloud storage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # Upload to S3/Backblaze/Cloudflare R2
          aws s3 cp ${{ steps.backup.outputs.BACKUP_FILE }} \
            s3://${{ secrets.BACKUP_BUCKET }}/${{ steps.backup.outputs.BACKUP_FILE }}
          
          # Get download URL
          BACKUP_URL=$(aws s3 presign s3://${{ secrets.BACKUP_BUCKET }}/${{ steps.backup.outputs.BACKUP_FILE }} --expires-in 604800)
          
          echo "BACKUP_URL=$BACKUP_URL" >> $GITHUB_OUTPUT
      
      - name: Update backup registry
        run: |
          # Load existing backups.json
          curl -s "${{ secrets.API_URL }}/api/backups/registry" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -o backups.json || echo '{"backups":[]}' > backups.json
          
          # Add new backup
          jq --arg timestamp "${{ steps.backup.outputs.TIMESTAMP }}" \
             --arg size "${{ steps.backup.outputs.BACKUP_SIZE }}" \
             --arg url "${{ steps.backup.outputs.BACKUP_URL }}" \
             --arg file "${{ steps.backup.outputs.BACKUP_FILE }}" \
             '.backups += [{"timestamp": $timestamp, "size": $size, "url": $url, "file": $file}]' \
             backups.json > backups-updated.json
          
          mv backups-updated.json backups.json
          
          # Commit to Git
          git config --local user.email "backup-bot@autostore.com"
          git config --local user.name "Backup Bot"
          git add backups.json
          git commit -m "ðŸ’¾ Backup created: ${{ steps.backup.outputs.TIMESTAMP }} (${{ steps.backup.outputs.BACKUP_SIZE }})"
          git push
      
      - name: Send backup notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ðŸ’¾ DATABASE BACKUP COMPLETE!
            
            Time: ${{ steps.backup.outputs.TIMESTAMP }}
            Size: ${{ steps.backup.outputs.BACKUP_SIZE }}
            File: ${{ steps.backup.outputs.BACKUP_FILE }}
            
            âœ… Backup saved to cloud storage
            âœ… Registry updated in Git
            
            You can rollback anytime using one-click restore!
      
      - name: Cleanup old backups
        run: |
          # Keep last 30 days of backups
          find backups/ -name "*.dump.gz" -mtime +30 -delete || true

  create-rollback-action:
    name: Create Rollback Capability
    runs-on: ubuntu-latest
    needs: backup-database
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create rollback workflow
        run: |
          cat > .github/workflows/rollback.yml << 'EOF'
          name: One-Click Rollback
          
          on:
            workflow_dispatch:
              inputs:
                backup_timestamp:
                  description: 'Backup timestamp to restore'
                  required: true
          
          jobs:
            rollback:
              runs-on: ubuntu-latest
              steps:
                - name: Download backup
                  run: |
                    BACKUP_URL=$(jq -r ".backups[] | select(.timestamp==\"${{ github.event.inputs.backup_timestamp }}\") | .url" backups.json)
                    wget -O backup.dump.gz "$BACKUP_URL"
                    gunzip backup.dump.gz
                
                - name: Restore database
                  run: |
                    PGPASSWORD=${{ secrets.DB_PASSWORD }} pg_restore \
                      -h ${{ secrets.DB_HOST }} \
                      -U ${{ secrets.DB_USER }} \
                      -d ${{ secrets.DB_NAME }} \
                      -c \
                      backup.dump
                
                - name: Notify rollback complete
                  run: |
                    echo "âœ… Database rolled back to ${{ github.event.inputs.backup_timestamp }}"
          EOF
          
          git add .github/workflows/rollback.yml
          git commit -m "ðŸ”„ Add one-click rollback capability"
          git push

