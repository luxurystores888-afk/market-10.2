name: Dynamic Pricing CI/CD

on:
  push:
    branches: [main, master]
    paths:
      - 'feature-dynamic-pricing/**'
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  DOCKER_IMAGE: cybermart/dynamic-pricing
  K8S_NAMESPACE: pricing-service

jobs:
  # ====================================
  # JOB 1: TEST
  # ====================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd feature-dynamic-pricing
          npm ci

      - name: Run unit tests
        run: |
          cd feature-dynamic-pricing
          npm test -- --coverage

      - name: Run integration tests
        run: |
          cd feature-dynamic-pricing
          npm run test:integration

      - name: Run performance tests
        run: |
          cd feature-dynamic-pricing
          npm run test:performance

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./feature-dynamic-pricing/coverage/lcov.info

  # ====================================
  # JOB 2: BUILD
  # ====================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./feature-dynamic-pricing
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ====================================
  # JOB 3: DEPLOY TO KUBERNETES
  # ====================================
  deploy:
    name: Deploy to K8s
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: |
          cd feature-dynamic-pricing/k8s
          kubectl apply -f namespace.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f ingress.yaml
          kubectl apply -f hpa.yaml

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/dynamic-pricing \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.K8S_NAMESPACE }}
          kubectl get svc -n ${{ env.K8S_NAMESPACE }}

  # ====================================
  # JOB 4: SMOKE TESTS
  # ====================================
  smoke-test:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for service
        run: sleep 30

      - name: Test health endpoint
        run: |
          curl -f ${{ secrets.SERVICE_URL }}/api/pricing/health || exit 1

      - name: Test readiness endpoint
        run: |
          curl -f ${{ secrets.SERVICE_URL }}/api/pricing/readiness || exit 1

      - name: Test optimize endpoint
        run: |
          response=$(curl -s ${{ secrets.SERVICE_URL }}/api/pricing/optimize)
          echo $response | jq -e '.success == true' || exit 1

      - name: Notify on success
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '✅ Dynamic Pricing deployed successfully!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()

  # ====================================
  # JOB 5: ROLLBACK ON FAILURE
  # ====================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: smoke-test
    if: failure()
    
    steps:
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/dynamic-pricing \
            -n ${{ env.K8S_NAMESPACE }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: '⚠️ Dynamic Pricing deployment failed - Rolling back!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

